<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="Notification">

	<!-- 알림 목록 조회 -->
    <select id="selectNotificationList" parameterType="com.dvdprime.server.mobile.model.NotificationDTO" resultMap="NotificationMap.default-map">
    SELECT notification_seq,
           member_id,
           notification_type,
           notification_title,
           notification_message,
           notification_target_url,
           notification_target_id,
           notification_status,
           notification_read_flag,
           FLOOR(DATE_FORMAT(creation_time, '%Y%m%d%H%i%s%f')/1000) as creation_time,
           FLOOR(DATE_FORMAT(updated_time, '%Y%m%d%H%i%s%f')/1000) as updated_time
      FROM notification_tbl
     <where>
           <if test="!empty(memberId)">
           AND member_id=#{memberId}
           </if>
           <if test="!empty(status)">
           AND notification_status=#{status}
           </if>
           <if test="!empty(readFlag)">
           AND notification_read_flag=#{readFlag}
           </if>
           <if test="!empty(creationDecimal)">
           AND <![CDATA[creation_time < CONCAT(LEFT(#{creationDecimal}, 14), '.', SUBSTRING(#{creationDecimal}, 15))]]>
           </if>
     </where>
     ORDER BY creation_time DESC
     <if test="limitCount > 0">
     LIMIT #{offset}, #{limitCount}
     </if>
    </select>
    
	<!-- 알림 전송 대기 목록 조회 -->
    <select id="selectNotificationSendList" resultMap="NotificationMap.worker-map">
    SELECT A.notification_seq,
           A.member_id,
           A.notification_type,
           A.notification_title,
           A.notification_message,
           A.notification_target_url,
           A.notification_target_id,
           A.notification_status,
           A.notification_read_flag,
           FLOOR(DATE_FORMAT(A.creation_time, '%Y%m%d%H%i%s%f')/1000) as creation_time,
           FLOOR(DATE_FORMAT(A.updated_time, '%Y%m%d%H%i%s%f')/1000) as updated_time,
           (SELECT count(*) FROM notification_tbl WHERE member_id=A.member_id AND notification_read_flag='01') as unread_count,
           B.device_token,
           B.device_version,
           C.config_enabled
      FROM notification_tbl A
           LEFT OUTER JOIN device_tbl B
             ON (A.member_id=B.member_id)
           LEFT OUTER JOIN config_tbl C
             ON (A.member_id=C.member_id AND C.config_type='01')
     WHERE A.notification_status='10'
     ORDER BY A.creation_time DESC
    </select>
    
	<!-- 알림 갯수 조회 -->
    <select id="selectNotificationCount" parameterType="com.dvdprime.server.mobile.model.NotificationDTO" resultType="int">
    SELECT count(*) as cnt
      FROM notification_tbl
     <where>
           <if test="!empty(memberId)">
           AND member_id=#{memberId}
           </if>
           <if test="!empty(dups)">
           AND notification_dups=#{dups}
           </if>
           <if test="!empty(status)">
           AND notification_status=#{status}
           </if>
           <if test="!empty(readFlag)">
           AND notification_read_flag=#{readFlag}
           </if>
     </where>
    </select>
    
    <!-- 알림 추가 -->
    <insert id="insertNotificationOne" parameterType="com.dvdprime.server.mobile.model.NotificationDTO">
    INSERT INTO notification_tbl (member_id, notification_type, notification_dups, notification_title, notification_message, notification_target_url, notification_target_id, creation_time, updated_time)
    VALUES (#{memberId}, #{type}, #{dups}, #{title}, #{message}, #{targetUrl}, #{targetId}, #{creationDecimal}, #{updatedDecimal})
    </insert>
    
    <!-- 알림 수정 -->
    <update id="updateNotificationOne" parameterType="com.dvdprime.server.mobile.model.NotificationDTO">
    UPDATE notification_tbl
       SET updated_time=#{updatedDecimal}
           <if test="!empty(status)">
           , notification_status=#{status}
           </if>
           <if test="!empty(readFlag)">
           , notification_read_flag=#{readFlag}
           </if>
           <if test="!empty(message)">
           , notification_message=#{message}
           </if>
           <if test="!empty(targetId)">
           , notification_target_id=#{targetId}
           </if>
           <if test="!empty(creationDecimal)">
           , creation_time=#{creationDecimal}
           </if>
     <where>
        <if test="seq > 0">
        AND notification_seq=#{seq}
        </if>
        <if test="!empty(memberId)">
        AND member_id=#{memberId}
        </if>
        <if test="!empty(dups)">
        AND notification_dups=#{dups}
        </if>
     </where>
      LIMIT 1
    </update>
</mapper>
